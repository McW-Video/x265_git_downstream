name: Github Actions

on:
  push:
    branches: [ "master", "develop/*" ]
  pull_request:
    branches: [ "master", "develop/*" ]

env:
  DOWNSTREAM_REPO: https://x-access-token:${{ secrets.PUSH_TOKEN }}@github.com/McW-Video/x265_git_downstream.git
  UPSTREAM_REPO: https://x-access-token:${{ secrets.PUSH_TOKEN }}@github.com/AKILAN-SIVA/x265_git.git
  MASTER_BRANCH: master

jobs:
  upstream-sync:
    runs-on: oboe.linux
    outputs:
      skip_smoke: ${{ steps.compare.outputs.skip_smoke }}
    steps:
      - name: Setup directory and repos
        shell: bash
        run: |
          echo "Starting upstream to downstream sync..."

          SYNC_DIR="/home/jenkins/Akilan/bitbucket/sync/x265"

          rm -rf "$SYNC_DIR"
          mkdir -p "$SYNC_DIR"
          cd "$SYNC_DIR"

          git clone --branch master $DOWNSTREAM_REPO repo
          cd repo

          git remote remove upstream 2>/dev/null || true
          git remote add upstream $UPSTREAM_REPO

          git fetch origin master
          git fetch upstream master

          CURRENT_COMMIT=$(git rev-parse origin/master)
          UPSTREAM_COMMIT=$(git rev-parse upstream/master)

          if [ "$CURRENT_COMMIT" = "$UPSTREAM_COMMIT" ]; then
            echo "No changes to sync. Exiting."
            echo "skip_smoke_and_reg=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          git checkout master
          echo "skip_smoke_and_reg=false" >> $GITHUB_OUTPUT

          # ✅ Detect if upstream-sync commit exists in downstream
          LAST_SYNC_COMMIT=$(git log origin/master --grep="\[skip-pr\]" -n 1 --pretty=format:"%H" || true)

          if [ -n "$LAST_SYNC_COMMIT" ]; then
            echo "Found last upstream-sync commit in downstream: $LAST_SYNC_COMMIT"
          else
            echo "⚠️ No upstream-sync commit found in downstream. Treating this as first-time sync."
          fi

          # Always merge with ours strategy, marking commit with [skip-pr]
          if git merge upstream/master -X ours --no-edit -m "Upstream sync commit [skip-pr]"; then
            git push origin master
            echo "Successfully synced upstream to downstream"
          else
            echo "Merge conflict detected. Manual intervention required."
            echo "Conflicting files:"
            git diff --name-only --diff-filter=U
            exit 1
          fi

  Windows-smoke-test:
    needs: upstream-sync
    if: github.ref_name == 'master' && needs.upstream-sync.outputs.skip_smoke_and_reg == 'false' || startsWith(github.ref_name, 'develop/')
    runs-on: tabla.windows
    steps:
    - name: Preparing workspace
      shell: cmd
      env:
        DOWNSTREAM_DIR: C:\jenkins_test\x265_smoke\x265_git_downstream
        TEST_HARNESS_DIR: C:\jenkins_test\x265_smoke\test-harness-git
      run: |
        IF EXIST "%DOWNSTREAM_DIR%" (
            echo "Downstream repo exists. Deleting..."
            rmdir /S /Q "%DOWNSTREAM_DIR%"
        )

        git clone %DOWNSTREAM_REPO% "%DOWNSTREAM_DIR%"
        cd "%DOWNSTREAM_DIR"
        git checkout %GITHUB_REF_NAME%

        IF EXIST "%TEST_HARNESS_DIR%" (
            echo "test-harness-git exists. Pulling latest changes..."
            cd "%TEST_HARNESS_DIR%"
            git pull https://Akilan_Sivakumar:ATATT3xFfGF0dQC-D-7njcKkdJyNco1C_pbPgXDuAITR0s8T2igGU7Izr4EskQ5QeiWuMDuX8bUlLb0tXZ4yltzf60TvtnkpimbeQw_x2XDSpTomsjutMpgIuU6AmokMcsEHJg9Z-7ioHW01xzQH26ma7gRg-OCJI0EDgMLFDAeTiHn8G-t2bbs=AB9EAEFE@bitbucket.org/multicoreware/test-harness-git.git
        ) ELSE (
            echo "Cloning test-harness-git..."
            git clone https://Akilan_Sivakumar:ATATT3xFfGF0dQC-D-7njcKkdJyNco1C_pbPgXDuAITR0s8T2igGU7Izr4EskQ5QeiWuMDuX8bUlLb0tXZ4yltzf60TvtnkpimbeQw_x2XDSpTomsjutMpgIuU6AmokMcsEHJg9Z-7ioHW01xzQH26ma7gRg-OCJI0EDgMLFDAeTiHn8G-t2bbs=AB9EAEFE@bitbucket.org/multicoreware/test-harness-git.git C:\jenkins_test\x265_smoke\test-harness-git
        )
    - name: Smoke test
      shell: cmd
      run: |
        cd "%TEST_HARNESS_DIR%"
        python smoke-test.py

  Linux-smoke-test:
    needs: upstream-sync
    if: github.ref_name == 'master' && needs.upstream-sync.outputs.skip_smoke_and_reg == 'false' || startsWith(github.ref_name, 'develop/')
    runs-on: oboe.linux
    steps:
      - name: Preparing workspace
        shell: bash
        run: |
          DOWNSTREAM_DIR="/home/jenkins/Akilan/x265_smoke/x265_git_downstream"
          HARNESS_DIR="/home/jenkins/Akilan/x265_smoke/test-harness-git"

          if [ -d "$DOWNSTREAM_DIR" ]; then
              echo "Downstream repo exists. Deleting..."
              rm -rf "$DOWNSTREAM_DIR"
          fi
          git clone $DOWNSTREAM_REPO "$DOWNSTREAM_DIR"
          cd "$DOWNSTREAM_DIR"
          git checkout "$GITHUB_REF_NAME"

          # test-harness-git
          if [ -d "$HARNESS_DIR" ]; then
              echo "test-harness-git exists. Pulling latest changes..."
              cd "$HARNESS_DIR"
              git pull https://Akilan_Sivakumar:ATATT3xFfGF0dQC-D-7njcKkdJyNco1C_pbPgXDuAITR0s8T2igGU7Izr4EskQ5QeiWuMDuX8bUlLb0tXZ4yltzf60TvtnkpimbeQw_x2XDSpTomsjutMpgIuU6AmokMcsEHJg9Z-7ioHW01xzQH26ma7gRg-OCJI0EDgMLFDAeTiHn8G-t2bbs=AB9EAEFE@bitbucket.org/multicoreware/test-harness-git.git
          else
              echo "Cloning test-harness-git..."
              git clone https://Akilan_Sivakumar:ATATT3xFfGF0dQC-D-7njcKkdJyNco1C_pbPgXDuAITR0s8T2igGU7Izr4EskQ5QeiWuMDuX8bUlLb0tXZ4yltzf60TvtnkpimbeQw_x2XDSpTomsjutMpgIuU6AmokMcsEHJg9Z-7ioHW01xzQH26ma7gRg-OCJI0EDgMLFDAeTiHn8G-t2bbs=AB9EAEFE@bitbucket.org/multicoreware/test-harness-git.git "$HARNESS_DIR"
          fi
      - name: Smoke test
        shell: bash
        run: |
          cd /home/jenkins/Akilan/x265_smoke/test-harness-git
          python smoke-test.py

  Linux-regression-test:
    needs: upstream-sync
    if: github.ref_name == 'master' && needs.upstream-sync.outputs.skip_smoke_and_reg == 'false' || startsWith(github.ref_name, 'develop/')
    runs-on: harmonica.linux
    steps:
      - name: Preparing workspace
        shell: bash
        run: |
          DOWNSTREAM_DIR="/home/mcw/jenkins_tests/x265_Regression/x265_git_downstream"
          HARNESS_DIR="/home/mcw/jenkins_tests/x265_Regression/test-harness-git"

          if [ -d "$DOWNSTREAM_DIR" ]; then
              echo "Downstream repo exists. Deleting..."
              rm -rf "$DOWNSTREAM_DIR"
          fi
          git clone $DOWNSTREAM_REPO "$DOWNSTREAM_DIR"
          cd "$DOWNSTREAM_DIR"
          git checkout "$GITHUB_REF_NAME"

          # test-harness-git
          if [ -d "$HARNESS_DIR" ]; then
              echo "test-harness-git exists. Pulling latest changes..."
              cd "$HARNESS_DIR"
              git pull https://Akilan_Sivakumar:ATATT3xFfGF0dQC-D-7njcKkdJyNco1C_pbPgXDuAITR0s8T2igGU7Izr4EskQ5QeiWuMDuX8bUlLb0tXZ4yltzf60TvtnkpimbeQw_x2XDSpTomsjutMpgIuU6AmokMcsEHJg9Z-7ioHW01xzQH26ma7gRg-OCJI0EDgMLFDAeTiHn8G-t2bbs=AB9EAEFE@bitbucket.org/multicoreware/test-harness-git.git
          else
              echo "Cloning test-harness-git..."
              git clone https://Akilan_Sivakumar:ATATT3xFfGF0dQC-D-7njcKkdJyNco1C_pbPgXDuAITR0s8T2igGU7Izr4EskQ5QeiWuMDuX8bUlLb0tXZ4yltzf60TvtnkpimbeQw_x2XDSpTomsjutMpgIuU6AmokMcsEHJg9Z-7ioHW01xzQH26ma7gRg-OCJI0EDgMLFDAeTiHn8G-t2bbs=AB9EAEFE@bitbucket.org/multicoreware/test-harness-git.git "$HARNESS_DIR"
          fi
      - name: Regression test
        shell: bash
        run: |
          cd /home/mcw/jenkins_tests/x265_Regression/test-harness-git
          python regression-test.py
