name: Github Actions

on:
  push:
    branches: [ "master", "develop/*" ]
  pull_request:
    branches: [ "master", "develop/*" ]

env:
  DOWNSTREAM_REPO: https://x-access-token:${{ secrets.PUSH_TOKEN }}@github.com/McW-Video/x265_git_downstream.git
  UPSTREAM_REPO: https://x-access-token:${{ secrets.PUSH_TOKEN }}@github.com/AKILAN-SIVA/x265_git.git
  MASTER_BRANCH: master
  BITBUCKET_TOKEN: ${{ secrets.BITBUCKET_APP_PASSWORD }}
  BITBUCKET_USERNAME: ${{ secrets.BITBUCKET_USERNAME }}

jobs:
  upstream-sync:
    runs-on: oboe.linux
    outputs:
      skip_smoke_and_reg: ${{ steps.compare.outputs.skip_smoke_and_reg }}
    steps:
      - name: Setup directory and repos
        shell: bash
        run: |
          echo "Starting upstream to downstream sync..."

          SYNC_DIR="/home/jenkins/Akilan/bitbucket/sync/x265"

          rm -rf "$SYNC_DIR"
          mkdir -p "$SYNC_DIR"
          cd "$SYNC_DIR"

          git clone --branch master $DOWNSTREAM_REPO repo
          cd repo

          git remote remove upstream 2>/dev/null || true
          git remote add upstream $UPSTREAM_REPO

          git fetch origin master
          git fetch upstream master

          CURRENT_COMMIT=$(git rev-parse origin/master)
          UPSTREAM_COMMIT=$(git rev-parse upstream/master)

          if [ "$CURRENT_COMMIT" = "$UPSTREAM_COMMIT" ]; then
            echo "No changes to sync. Exiting."
            echo "skip_smoke_and_reg=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          git checkout master
          echo "skip_smoke_and_reg=false" >> $GITHUB_OUTPUT

          # ✅ Detect if upstream-sync commit exists in downstream
          LAST_SYNC_COMMIT=$(git log origin/master --grep="\[skip-pr\]" -n 1 --pretty=format:"%H" || true)

          if [ -n "$LAST_SYNC_COMMIT" ]; then
            echo "Found last upstream-sync commit in downstream: $LAST_SYNC_COMMIT"
          else
            echo "⚠️ No upstream-sync commit found in downstream. Treating this as first-time sync."
          fi

          # Always merge with ours strategy, marking commit with [skip-pr]
          if git merge upstream/master -X ours --no-edit -m "Upstream sync commit [skip-pr]"; then
            git push origin master
            echo "Successfully synced upstream to downstream"
          else
            echo "Merge conflict detected. Manual intervention required."
            echo "Conflicting files:"
            git diff --name-only --diff-filter=U
            exit 1
          fi
  Auto-create-pr:
    name: Auto-create PR
    runs-on: ubuntu-latest
    outputs:
      skip_smoke: ${{ steps.pr.outputs.SKIP_SMOKE }}
    steps:
      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq git python3 python3-pip

      - name: Set GitHub user
        run: |
          git config --global user.name "Akilan_Sivakumar"
          git config --global user.email "akilan.sivakumar@multicorewareinc.com"

      - name: Auto-create PR
        id: pr
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.PUSH_TOKEN }}
          GITHUB_BRANCH: ${{ github.ref_name }}
        run: |
          set -e
          SKIP_SMOKE=false
          echo "Branch: $GITHUB_BRANCH"

          if [ "$GITHUB_BRANCH" != "$MASTER_BRANCH" ]; then
            # Non-master branch logic
            TMP_DIR="/tmp/x265-pr"
            rm -rf "$TMP_DIR"

            # Clone downstream master
            git clone --branch $MASTER_BRANCH $DOWNSTREAM_REPO "$TMP_DIR"
            cd "$TMP_DIR"
            git remote add upstream $UPSTREAM_REPO
            git fetch upstream $MASTER_BRANCH

            if ! git merge-base --is-ancestor upstream/$MASTER_BRANCH HEAD; then
              echo "Rebasing downstream/master on upstream/master..."
              git rebase upstream/$MASTER_BRANCH
              git push origin $MASTER_BRANCH
            fi

            # Rebase source branch on top of downstream/master
            SRC_BRANCH="$GITHUB_BRANCH"
            TMP_DIR="/tmp/x265-branch"
            rm -rf "$TMP_DIR"
            git clone --branch "$SRC_BRANCH" $DOWNSTREAM_REPO "$TMP_DIR"
            cd "$TMP_DIR"
            git remote add origin_downstream $DOWNSTREAM_REPO
            git fetch origin_downstream $MASTER_BRANCH

            if ! git merge-base --is-ancestor origin_downstream/$MASTER_BRANCH HEAD; then
              echo "Rebasing $SRC_BRANCH on downstream/master..."
              git rebase origin_downstream/$MASTER_BRANCH
              git push origin "$SRC_BRANCH" --force-with-lease
              SKIP_SMOKE=true
            fi

            # Check existing PR
            EXISTING_PR=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/McW-Video/x265_git_downstream/pulls?head=McW-Video:$SRC_BRANCH&base=master" | jq '. | length')
            if [ "$EXISTING_PR" -eq 0 ]; then
              echo "Creating PR $SRC_BRANCH -> master"
              curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                      \"title\": \"Auto PR: $SRC_BRANCH -> master\",
                      \"head\": \"$SRC_BRANCH\",
                      \"base\": \"master\",
                      \"body\": \"Automatically created PR from branch $SRC_BRANCH\"
                    }" \
                "https://api.github.com/repos/McW-Video/x265_git_downstream/pulls"
            else
              echo "PR already exists. Skipping."
            fi

          else
            # Master branch → upstream master sync
            TMP_DIR="/tmp/x265-master-sync"
            rm -rf "$TMP_DIR"
            git clone $DOWNSTREAM_REPO "$TMP_DIR"
            cd "$TMP_DIR"
            git remote add upstream $UPSTREAM_REPO
            git fetch upstream
            git fetch origin

            if ! git merge-base --is-ancestor upstream/$MASTER_BRANCH HEAD; then
              echo "Rebasing downstream/master on upstream/master..."
              git rebase upstream/$MASTER_BRANCH
              git push origin $MASTER_BRANCH
              SKIP_SMOKE=true
              echo "Exiting after master sync."
            fi

            # Clean stale sync branches
            SYNC_BRANCHES=$(git ls-remote --heads origin "sync*" | awk '{print $2}' | sed 's@refs/heads/@@')
            ACTIVE_BRANCHES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/AKILAN-SIVA/x265_git/pulls?state=open" | jq -r '.[]?.head.ref')

            for BR in $SYNC_BRANCHES; do
              if echo "$ACTIVE_BRANCHES" | grep -qx "$BR"; then
                echo "Keeping active PR branch: $BR"
              else
                echo "Deleting stale sync branch: $BR"
                git push origin --delete "$BR" || true
              fi
            done

            # Create new sync branch
            SYNC_BRANCH="sync-temp-$(date +%s)"
            git checkout -B "$SYNC_BRANCH" upstream/$MASTER_BRANCH

            # Cherry-pick filtered commits
            LAST_SYNC_COMMIT=$(git log upstream/$MASTER_BRANCH --grep="\[skip-pr\]" -n 1 --pretty=format:"%H" || true)
            if [ -n "$LAST_SYNC_COMMIT" ]; then
              COMMITS=$(git log --reverse --pretty=format:"%H" $LAST_SYNC_COMMIT..origin/$MASTER_BRANCH)
            else
              COMMITS=$(git log --reverse --pretty=format:"%H" upstream/$MASTER_BRANCH..origin/$MASTER_BRANCH)
            fi

            PIPELINE_REGEX='(^|/)(\.github/workflows/.*|Jenkinsfile|azure-pipelines\.ya?ml)$'
            while read -r hash; do
              [ -z "$hash" ] && continue
              changed="$(git show --pretty='' --name-only "$hash")"
              non_pipeline="$(printf '%s\n' "$changed" | grep -Ev "$PIPELINE_REGEX" || true)"
              if [ -z "$non_pipeline" ]; then
                echo "Skipping pipeline-only commit: $(git log -1 --pretty=%s "$hash")"
                continue
              fi
              echo "Cherry-picking: $(git log -1 --pretty=%h\ %s "$hash")"
              git cherry-pick "$hash" || git cherry-pick --skip || true
            done <<< "$COMMITS"

            # Push sync branch & create PR
            git push -f origin "$SYNC_BRANCH"
            EXISTING_PR=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/AKILAN-SIVA/x265_git/pulls?head=McW-Video:$SYNC_BRANCH&base=$MASTER_BRANCH" | jq '. | length')
            if [ "$EXISTING_PR" -eq 0 ]; then
              echo "Creating new PR for $SYNC_BRANCH → $MASTER_BRANCH"
              curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                      \"title\": \"Sync downstream master (filtered) to master\",
                      \"head\": \"$SYNC_BRANCH\",
                      \"base\": \"$MASTER_BRANCH\",
                      \"body\": \"Auto-created PR with filtered commits (no pipeline files).\" 
                    }" \
                "https://api.github.com/repos/AKILAN-SIVA/x265_git/pulls"
            else
              echo "PR already exists for $SYNC_BRANCH → $MASTER_BRANCH. Skipping."
            fi
          fi

          echo "SKIP_SMOKE=$SKIP_SMOKE" >> $GITHUB_OUTPUT

  Windows-smoke-test:
    needs: upstream-sync
    if: ((github.ref_name == 'master' && needs.upstream-sync.outputs.skip_smoke_and_reg == 'false') || startsWith(github.ref_name, 'develop/'))
    runs-on: tabla.windows
    env:
        DOWNSTREAM_DIR: C:\jenkins_test\x265_smoke\x265_git_downstream
        TEST_HARNESS_DIR: C:\jenkins_test\x265_smoke\test-harness-git
    steps:
    - name: Preparing workspace
      shell: cmd
      run: |
        IF EXIST "%DOWNSTREAM_DIR%" (
            echo "Downstream repo exists. Deleting..."
            rmdir /S /Q "%DOWNSTREAM_DIR%"
        )

        git clone %DOWNSTREAM_REPO% "%DOWNSTREAM_DIR%"
        cd "%DOWNSTREAM_DIR"
        git checkout %GITHUB_REF_NAME%

        IF EXIST "%TEST_HARNESS_DIR%" (
            echo "test-harness-git exists. Pulling latest changes..."
            cd "%TEST_HARNESS_DIR%"
            git pull https://${BITBUCKET_USERNAME}:${BITBUCKET_TOKEN}@bitbucket.org/multicoreware/test-harness-git.git
        ) ELSE (
            echo "Cloning test-harness-git..."
            git clone https://${BITBUCKET_USERNAME}:${BITBUCKET_TOKEN}@bitbucket.org/multicoreware/test-harness-git.git C:\jenkins_test\x265_smoke\test-harness-git
        )
    - name: Smoke test
      shell: cmd
      run: |
        cd "%TEST_HARNESS_DIR%"
        python smoke-test.py

  Linux-smoke-test:
    needs: upstream-sync
    if: ((github.ref_name == 'master' && needs.upstream-sync.outputs.skip_smoke_and_reg == 'false') || startsWith(github.ref_name, 'develop/'))
    runs-on: oboe.linux
    env:
      DOWNSTREAM_DIR: /home/jenkins/Akilan/x265_smoke/x265_git_downstream
      HARNESS_DIR: /home/jenkins/Akilan/x265_smoke/test-harness-git
    steps:
      - name: Preparing workspace
        shell: bash
        run: |
          if [ -d "$DOWNSTREAM_DIR" ]; then
              echo "Downstream repo exists. Deleting..."
              rm -rf "$DOWNSTREAM_DIR"
          fi
          git clone $DOWNSTREAM_REPO "$DOWNSTREAM_DIR"
          cd "$DOWNSTREAM_DIR"
          git checkout "$GITHUB_REF_NAME"

          # test-harness-git
          if [ -d "$HARNESS_DIR" ]; then
              echo "test-harness-git exists. Pulling latest changes..."
              cd "$HARNESS_DIR"
              git pull https://${BITBUCKET_USERNAME}:${BITBUCKET_TOKEN}@bitbucket.org/multicoreware/test-harness-git.git
          else
              echo "Cloning test-harness-git..."
              git clone https://${BITBUCKET_USERNAME}:${BITBUCKET_TOKEN}@bitbucket.org/multicoreware/test-harness-git.git "$HARNESS_DIR"
          fi
      - name: Smoke test
        shell: bash
        run: |
          cd "$HARNESS_DIR"
          python smoke-test.py

  Linux-regression-test:
    needs: upstream-sync
    if: ((github.ref_name == 'master' && needs.upstream-sync.outputs.skip_smoke_and_reg == 'false') || startsWith(github.ref_name, 'develop/'))
    runs-on: harmonica.linux
    env:
      DOWNSTREAM_DIR: /home/mcw/jenkins_tests/x265_Regression/x265_git_downstream
      HARNESS_DIR: /home/mcw/jenkins_tests/x265_Regression/test-harness-git
    steps:
      - name: Preparing workspace
        shell: bash
        run: |
          if [ -d "$DOWNSTREAM_DIR" ]; then
              echo "Downstream repo exists. Deleting..."
              rm -rf "$DOWNSTREAM_DIR"
          fi
          git clone $DOWNSTREAM_REPO "$DOWNSTREAM_DIR"
          cd "$DOWNSTREAM_DIR"
          git checkout "$GITHUB_REF_NAME"

          # test-harness-git
          if [ -d "$HARNESS_DIR" ]; then
              echo "test-harness-git exists. Pulling latest changes..."
              cd "$HARNESS_DIR"
              git pull https://${BITBUCKET_USERNAME}:${BITBUCKET_TOKEN}@bitbucket.org/multicoreware/test-harness-git.git
          else
              echo "Cloning test-harness-git..."
              git clone https://${BITBUCKET_USERNAME}:${BITBUCKET_TOKEN}@bitbucket.org/multicoreware/test-harness-git.git "$HARNESS_DIR"
          fi
      - name: Regression test
        shell: bash
        run: |
          cd "$HARNESS_DIR"
          python regression-test.py
